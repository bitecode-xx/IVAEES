import java.io.*;
import java.nio.IntBuffer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

import javax.media.opengl.*;
import javax.media.opengl.awt.*;
import javax.media.opengl.glu.GLU;

import com.jogamp.opengl.util.*;
import com.jogamp.opengl.util.texture.*;

public class Hello implements GLEventListener, KeyListener {
	
	private double moving = 0;
	
	private Texture texture;
	private DistortableMesh mesh;
	
	public static void main(String[] args) {
		System.setProperty("sun.java2d.noddraw", "true");
		
		GLProfile.initSingleton(true);
		GLProfile glp = GLProfile.getDefault();
        GLCapabilities caps = new GLCapabilities(glp);
        GLCanvas canvas = new GLCanvas(caps);
        
        GraphicsDevice screen = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        
        JFrame frame = new JFrame("Hello");
        frame.setUndecorated(true);
        
        System.out.println(screen.isFullScreenSupported());
        screen.setFullScreenWindow(frame);
        
        //frame.setSize(800, 800);
        frame.add(canvas);
        frame.setVisible(true);
        
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        
        Hello app = new Hello();
        canvas.addGLEventListener(app);
        frame.addKeyListener(app);
        
        FPSAnimator animator = new FPSAnimator(60);
        animator.add(canvas);
        animator.start();
	}

	private void update() {
		moving += 0.01;
	}
	
	private void render(GLAutoDrawable drawable) {
		GL2 gl = drawable.getGL().getGL2();
		GLU glu = GLU.createGLU(gl);
		
		gl.glMatrixMode(GL2.GL_MODELVIEW);
		gl.glLoadIdentity();
		
		gl.glClear(GL2.GL_COLOR_BUFFER_BIT);
		
	    mesh.render(gl);
	    gl.glPushMatrix();
	    gl.glTranslated(0.5, 0, 0);
	    mesh.render(gl);
	    gl.glPopMatrix();
	    
	    gl.glPushMatrix();
	    gl.glTranslated(-0.5, 0, 0);
	    mesh.render(gl);
	    gl.glPopMatrix();
	    
	    gl.glPushMatrix();
	    gl.glTranslated(0, 0.5, 0);
	    mesh.render(gl);
	    gl.glPopMatrix();
	    
	    gl.glPushMatrix();
	    gl.glTranslated(0, -0.5, 0);
	    mesh.render(gl);
	    gl.glPopMatrix();
	    
	    gl.glPushMatrix();
	    gl.glTranslated(0.5, 0.5, 0);
	    mesh.render(gl);
	    gl.glPopMatrix();
	    
	    gl.glPushMatrix();
	    gl.glTranslated(0.5, -0.5, 0);
	    mesh.render(gl);
	    gl.glPopMatrix();
	    
	    gl.glPushMatrix();
	    gl.glTranslated(-0.5, 0.5, 0);
	    mesh.render(gl);
	    gl.glPopMatrix();
	    
	    gl.glPushMatrix();
	    gl.glTranslated(-0.5, -0.5, 0);
	    mesh.render(gl);
	    gl.glPopMatrix();
	    
	    
	}
	
	public void display(GLAutoDrawable drawable) {
		update();
		render(drawable);
	}

	public void dispose(GLAutoDrawable drawable) {
		
	}

	public void init(GLAutoDrawable drawable) {
		GL2 gl = drawable.getGL().getGL2();
		gl.glEnable(GL2.GL_TEXTURE_2D);
		gl.glTexEnvf(GL2.GL_TEXTURE_ENV, GL2.GL_TEXTURE_ENV_MODE, GL2.GL_MODULATE);
		
		try {
			texture = TextureIO.newTexture(new File("lolwut.jpg"), true);
		} catch(Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
		
		//IntBuffer maxAniso = IntBuffer.allocate(1);
		//gl.glGetIntegerv(GL2.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, maxAniso);
		//System.out.println(maxAniso.get(0));
		//gl.glTexParameteri(GL2.GL_TEXTURE_2D, GL.GL_TEXTURE_MAX_ANISOTROPY_EXT, maxAniso.get(0));
		
		texture.setTexParameteri(GL.GL_TEXTURE_WRAP_S, GL.GL_REPEAT);
		texture.setTexParameteri(GL.GL_TEXTURE_WRAP_T, GL.GL_REPEAT);
		texture.setTexParameteri(GL.GL_TEXTURE_MAG_FILTER, GL.GL_LINEAR_MIPMAP_LINEAR);
		texture.setTexParameteri(GL.GL_TEXTURE_MIN_FILTER, GL.GL_LINEAR);
		
		//texture.bind();
		
		mesh = new DistortableMesh(0.5, 16, texture);
		//mesh.setTransform(MatrixTransform2.getRotationMatrix(Math.PI/3));
		//mesh.setTransform(new MatrixTransform2(0.1, 0.2, 0.3, 0.4));
		mesh.setTransform(new Transform2D() {
			public Vec2D transform(Vec2D point) {
				Vec2D result = new Vec2D();
				result.x = point.x + 0.1*Math.sin((point.y+moving)*5);
				result.y = point.y + 0.1*Math.sin((point.x+moving)*5);
				return result;
			}
			
		});
	}

	public void reshape(GLAutoDrawable drawable, int x, int y, int width,
			int height) {
		GL2 gl = drawable.getGL().getGL2();
		GLU glu = GLU.createGLU(gl);
		
		gl.glViewport(0, 0, width, height);
		
		gl.glMatrixMode(GL2.GL_PROJECTION);
		gl.glLoadIdentity();
		glu.gluOrtho2D(-(double)width/(double)height, (double)width/(double)height, -1.0, 1.0);
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		if(e.getKeyCode() == KeyEvent.VK_ESCAPE) {
			System.exit(0);
		}
	}

}
